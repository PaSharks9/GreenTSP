import random
import time
from Cliente import Cliente, euclidean_distance


def scelta_nodi(Percorso):
    index_nodi_scelti= []
    index_nodo1= -1
    index_nodo2= -1
    
    lunghezza_percorso= len(Percorso)

    while len(index_nodi_scelti) != 2:

        while index_nodo1 == index_nodo2:
            index_nodo1= random.randint(0,lunghezza_percorso-1)
            index_nodo2= random.randint(0,lunghezza_percorso-1)

            if Percorso[index_nodo1] == 0:
                index_nodo1= 0
            
            if Percorso[index_nodo2] == 0:
                index_nodo2= 0
            
            arco1= (index_nodo1,index_nodo1 + 1)
            arco2= (index_nodo2,index_nodo2 + 1)

            if arco1[0] in arco2 or arco1[1] in arco2:
                index_nodo1= -1
                index_nodo2= -1
            else:
                index_nodi_scelti= [index_nodo1,index_nodo2]
                archi_scelti= [[arco1[0],arco1[1]], [arco2[0],arco2[1]]]

    return archi_scelti

def two_opt(Percorso, dizionario_citta, dizionario_stazioni):
    nuovo_percorso= []

    # Devo selezionare due archi NON adiacenti su cui fare lo swap 
    # L'arco viene identificato dal nodo selezionato e dal suo successivo
    archi_scelti= scelta_nodi(Percorso)

    # Ora devo collegarli nell'unico modo legale possibile
    # Ovvero il primo nodo di ogni arco selezionato deve connettersi con il secondo nodo dell'altro arco

    """if archi_scelti[0][1] == 0:  #Se è un arco che ha come secondo vertice il deposito, l'indice di 0 è l'ultimo elemento del percorso, lo specifico perchè altrimenti index darebbe come indice di 0, 0
        index2arco1= len(Percorso) - 1 
        index1arco1= Percorso.index(archi_scelti[0][0])
    else:
        index1arco1= Percorso.index(archi_scelti[0][0])
        index2arco1= Percorso.index(archi_scelti[0][1])

    if archi_scelti[1][1] == 0:
        index2arco2= len(Percorso) - 1
        index1arco2= Percorso.index(archi_scelti[1][0])
    else:
        index1arco2= Percorso.index(archi_scelti[1][0])
        index2arco2= Percorso.index(archi_scelti[1][1])"""


    # Ordino gli archi, ovvero, arco1 è tra i due il primo arco che viene attraversato nel Percorso
    index1arco1= archi_scelti[0][0]
    index2arco1= archi_scelti[0][1]

    index1arco2= archi_scelti[1][0]
    index2arco2= archi_scelti[1][1]

    if index1arco1 > index1arco2:
        v= index1arco1
        index1arco1= index1arco2
        index1arco2= v

        v= index2arco1
        index2arco1= index2arco2
        index2arco2= v

    if index1arco1 != 0:
        nuovo_percorso= Percorso[0:(index1arco1 + 1)]
    else:
        # Se il primo vertice del primo arco ha indice 0 allora è per forza il nodo 0
        nuovo_percorso.append(0)
    
    # Arrivato al primo vertice del primo arco devo aggiungere al percorso il primo vertice del secondo arco
    nuovo_percorso.append(Percorso[index1arco2])

    # Ora devo aggiungere a ritroso, a partire dal primo vertice del secondo arco, fino al secondo vertice del primo arco
    lista= Percorso[(index2arco1 + 1):index1arco2]
    lista.reverse()

    nuovo_percorso=  nuovo_percorso + lista

    nuovo_percorso.append(Percorso[index2arco1])


    # Se il secondo vertice del secondo arco è 0 allora devo solo aggiungere 0 
    if index2arco2 == len(Percorso) - 1:
        nuovo_percorso.append(0)
    else:

        listaFinale= Percorso[index2arco2:]
        nuovo_percorso = nuovo_percorso + listaFinale

    #print("\narchi_scelti: " + str(archi_scelti))
    
    return archi_scelti, nuovo_percorso





# Deprecati, errore con valori e indici
# ---------------------------------------------
def scelta_nodi1(Percorso):
    nodi_scelti= []
    nodo1= -1
    nodo2= -1
    while len(nodi_scelti) != 2:
        while nodo1 == nodo2:
            nodo1= random.choice(Percorso)
            nodo2= random.choice(Percorso)

        # Per fare in modo che due archi non siano adiacenti , i due archi non devono condividere neanche 1 vertice
        if nodo1 == 0:
            # Se nodo1 è uguale al deposito, l'arco che formerà sarà per forza con la prima città nel percorso
            arco1= (0,Percorso[1])
        else:
            try:
                posizione_nodo1= Percorso.index(nodo1)
                arco1= (Percorso[posizione_nodo1],Percorso[posizione_nodo1 + 1])
            except:
                print("Percorso: " + str(Percorso))
                print("nodo1: " + str(nodo1))
                print("posizione_nodo1: " + str(posizione_nodo1))
        
        if nodo2 == 0:
            arco2= (0,Percorso[1])
        else:
            posizione_nodo2= Percorso.index(nodo2)
            arco2= (Percorso[posizione_nodo2],Percorso[posizione_nodo2 + 1])


        if arco1[0] in arco2 or arco1[1] in arco2:
            # Se i due archi condividono uno stesso vertice significa che sono adiacenti e quindi devo riselezionare i nodi
            # Per fare ciò metto nodo1 == nodo2 in modo da rientrare nella scelta dei nodi
            nodo1= -1
            nodo2= -1
        else:
            nodi_scelti= [nodo1,nodo2]
            archi_scelti= [[arco1[0],arco1[1]], [arco2[0],arco2[1]]]
    
    return archi_scelti

def two_opt1(Percorso, dizionario_citta, dizionario_stazioni):
    nuovo_percorso= []

    # Devo selezionare due archi NON adiacenti su cui fare lo swap 
    # L'arco viene identificato dal nodo selezionato e dal suo successivo
    archi_scelti= scelta_nodi1(Percorso)

    # Ora devo collegarli nell'unico modo legale possibile
    # Ovvero il primo nodo di ogni arco selezionato deve connettersi con il secondo nodo dell'altro arco

    if archi_scelti[0][1] == 0:  #Se è un arco che ha come secondo vertice il deposito, l'indice di 0 è l'ultimo elemento del percorso, lo specifico perchè altrimenti index darebbe come indice di 0, 0
        index2arco1= len(Percorso) - 1 
        index1arco1= Percorso.index(archi_scelti[0][0])
    else:
        index1arco1= Percorso.index(archi_scelti[0][0])
        index2arco1= Percorso.index(archi_scelti[0][1])

    if archi_scelti[1][1] == 0:
        index2arco2= len(Percorso) - 1
        index1arco2= Percorso.index(archi_scelti[1][0])
    else:
        index1arco2= Percorso.index(archi_scelti[1][0])
        index2arco2= Percorso.index(archi_scelti[1][1])


    # Ordino gli archi, ovvero, arco1 è tra i due il primo arco che viene attraversato nel Percorso

    if index1arco1 > index1arco2:
        v= index1arco1
        index1arco1= index1arco2
        index1arco2= v

        v= index2arco1
        index2arco1= index2arco2
        index2arco2= v

    if index1arco1 != 0:
        nuovo_percorso= Percorso[0:(index1arco1 + 1)]
    else:
        # Se il primo vertice del primo arco ha indice 0 allora è per forza il nodo 0
        nuovo_percorso.append(0)
    
    # Arrivato al primo vertice del primo arco devo aggiungere al percorso il primo vertice del secondo arco
    nuovo_percorso.append(Percorso[index1arco2])

    # Ora devo aggiungere a ritroso, a partire dal primo vertice del secondo arco, fino al secondo vertice del primo arco
    lista= Percorso[(index2arco1 + 1):index1arco2]
    lista.reverse()
    print("reverse: " + str(lista))
    nuovo_percorso=  nuovo_percorso + lista

    nuovo_percorso.append(Percorso[index2arco1])


    # Se il secondo vertice del secondo arco è 0 allora devo solo aggiungere 0 
    if index2arco2 == len(Percorso) - 1:
        nuovo_percorso.append(0)
    else:
        print("index2arco2: " + str(index2arco2))
        listaFinale= Percorso[index2arco2:]
        nuovo_percorso = nuovo_percorso + listaFinale

    #print("\narchi_scelti: " + str(archi_scelti))
    
    return archi_scelti, nuovo_percorso
# ---------------------------------------------

if __name__ == "__main__":
    k= 56
    dizionario_stazioni = {1: [10, 10], 2: [10, -10], 3: [-10, -10], 4: [-10, 10]}

    G= { 0: {1: 8, 2: 22, 3: 17, 4: 15, 5: 10, 6: 17, 7: 15, 8: 13, 9: 15, 10: 11, 11: 13, 12: 19, 13: 10, 14: 9, 15: 16, 16: 20, 17: 7, 18: 12, 19: 9, 20: 11, 21: 10, 22: 18, 23: 14, 24: 19, 25: 18, 26: 20, 27: 17, 28: 6, 29: 22, 30: 14, 31: 4, 32: 21, 33: 27, 34: 12, 35: 19, 36: 19, 37: 22, 38: 25, 39: 14, 40: 22, 41: 24, 42: 20, 43: 17, 44: 8, 45: 9, 46: 9, 47: 12, 48: 3, 49: 22}, 
         1: {0: 8, 2: 18, 3: 11, 4: 17, 5: 15, 6: 21, 7: 19, 8: 18, 9: 11, 10: 3, 11: 13, 12: 12, 13: 12, 14: 16, 15: 17, 16: 20, 17: 12, 18: 20, 19: 3, 20: 19, 21: 11, 22: 17, 23: 15, 24: 11, 25: 22, 26: 20, 27: 14, 28: 10, 29: 17, 30: 22, 31: 5, 32: 17, 33: 22, 34: 9, 35: 18, 36: 17, 37: 29, 38: 20, 39: 14, 40: 28, 41: 20, 42: 16, 43: 24, 44: 3, 45: 15, 46: 15, 47: 18, 48: 5, 49: 29}, 
         2: {0: 22, 1: 18, 3: 27, 4: 16, 5: 21, 6: 20, 7: 21, 8: 20, 9: 7, 10: 19, 11: 31, 12: 12, 13: 15, 14: 31, 15: 14, 16: 38, 17: 19, 18: 32, 19: 20, 20: 29, 21: 13, 22: 9, 23: 13, 24: 16, 25: 39, 26: 11, 27: 31, 28: 18, 29: 2, 30: 31, 31: 18, 32: 2, 33: 37, 34: 26, 35: 35, 36: 5, 37: 34, 38: 5, 39: 12, 40: 45, 41: 35, 42: 33, 43: 38, 44: 15, 45: 32, 46: 32, 47: 24, 48: 22, 49: 44}, 
         3: {0: 17, 1: 11, 2: 27, 4: 29, 5: 26, 6: 33, 7: 31, 8: 29, 9: 21, 10: 8, 11: 10, 12: 15, 13: 23, 14: 21, 15: 29, 16: 14, 17: 23, 18: 27, 19: 8, 20: 28, 21: 22, 22: 28, 23: 26, 24: 12, 25: 21, 26: 31, 27: 5, 28: 21, 29: 25, 30: 31, 31: 17, 32: 27, 33: 11, 34: 6, 35: 10, 36: 27, 37: 39, 38: 26, 39: 26, 40: 29, 41: 8, 42: 6, 43: 30, 44: 14, 45: 19, 46: 18, 47: 29, 48: 13, 49: 33}, 
         4: {0: 15, 1: 17, 2: 16, 3: 29, 5: 7, 6: 4, 7: 5, 8: 4, 9: 12, 10: 20, 11: 28, 12: 22, 13: 5, 14: 21, 15: 2, 16: 35, 17: 8, 18: 19, 19: 20, 20: 14, 21: 6, 22: 7, 23: 3, 24: 24, 25: 32, 26: 7, 27: 31, 28: 9, 29: 18, 30: 16, 31: 12, 32: 14, 33: 40, 34: 25, 35: 33, 36: 11, 37: 18, 38: 21, 39: 4, 40: 35, 41: 37, 42: 33, 43: 25, 44: 15, 45: 23, 46: 24, 47: 9, 48: 17, 49: 32},
         5: {0: 10, 1: 15, 2: 21, 3: 26, 4: 7, 6: 8, 7: 5, 8: 4, 9: 16, 10: 19, 11: 23, 12: 24, 13: 6, 14: 15, 15: 9, 16: 30, 17: 3, 18: 12, 19: 18, 20: 7, 21: 8, 22: 13, 23: 8, 24: 25, 25: 26, 26: 14, 27: 27, 28: 5, 29: 22, 30: 9, 31: 10, 32: 19, 33: 37, 34: 22, 35: 29, 36: 17, 37: 14, 38: 25, 39: 9, 40: 28, 41: 34, 42: 30, 43: 18, 44: 14, 45: 17, 46: 18, 47: 3, 48: 13, 49: 25}, 
         6: {0: 17, 1: 21, 2: 20, 3: 33, 4: 4, 5: 8, 7: 3, 8: 4, 9: 17, 10: 24, 11: 31, 12: 26, 13: 9, 14: 23, 15: 6, 16: 37, 17: 10, 18: 19, 19: 24, 20: 14, 21: 10, 22: 11, 23: 7, 24: 28, 25: 34, 26: 9, 27: 34, 28: 12, 29: 22, 30: 15, 31: 16, 32: 18, 33: 44, 34: 29, 35: 37, 36: 15, 37: 14, 38: 25, 39: 8, 40: 36, 41: 41, 42: 37, 43: 25, 44: 19, 45: 25, 46: 26, 47: 8, 48: 20, 49: 32}, 
         7: {0: 15, 1: 19, 2: 21, 3: 31, 4: 5, 5: 5, 6: 3, 8: 1, 9: 17, 10: 23, 11: 28, 12: 26, 13: 8, 14: 20, 15: 7, 16: 35, 17: 8, 18: 16, 19: 22, 20: 11, 21: 9, 22: 12, 23: 8, 24: 28, 25: 31, 26: 11, 27: 32, 28: 10, 29: 23, 30: 12, 31: 14, 32: 19, 33: 42, 34: 26, 35: 34, 36: 16, 37: 13, 38: 26, 39: 9, 40: 32, 41: 39, 42: 34, 43: 22, 44: 17, 45: 22, 46: 23, 47: 5, 48: 18, 49: 29}, 
         8: {0: 13, 1: 18, 2: 20, 3: 29, 4: 4, 5: 4, 6: 4, 7: 1, 9: 16, 10: 21, 11: 27, 12: 25, 13: 6, 14: 19, 15: 6, 16: 33, 17: 6, 18: 15, 19: 21, 20: 10, 21: 8, 22: 11, 23: 7, 24: 26, 25: 30, 26: 11, 27: 30, 28: 8, 29: 22, 30: 12, 31: 12, 32: 18, 33: 40, 34: 25, 35: 33, 36: 15, 37: 14, 38: 25, 39: 8, 40: 32, 41: 38, 42: 33, 43: 21, 44: 16, 45: 21, 46: 22, 47: 5, 48: 17, 49: 28}, 
         9: {0: 15, 1: 11, 2: 7, 3: 21, 4: 12, 5: 16, 6: 17, 7: 17, 8: 16, 10: 13, 11: 25, 12: 10, 13: 10, 14: 24, 15: 11, 16: 32, 17: 13, 18: 25, 19: 14, 20: 23, 21: 8, 22: 7, 23: 9, 24: 12, 25: 32, 26: 11, 27: 25, 28: 12, 29: 7, 30: 25, 31: 11, 32: 6, 33: 32, 34: 20, 35: 29, 36: 6, 37: 30, 38: 10, 39: 8, 40: 38, 41: 29, 42: 27, 43: 31, 44: 8, 45: 24, 46: 25, 47: 19, 48: 15, 49: 37}, 
         10: {0: 11, 1: 3, 2: 19, 3: 8, 4: 20, 5: 19, 6: 24, 7: 23, 8: 21, 9: 13, 11: 13, 12: 10, 13: 15, 14: 18, 15: 20, 16: 19, 17: 15, 18: 23, 19: 2, 20: 22, 21: 14, 22: 19, 23: 18, 24: 8, 25: 22, 26: 23, 27: 12, 28: 13, 29: 18, 30: 25, 31: 9, 32: 19, 33: 19, 34: 7, 35: 16, 36: 19, 37: 33, 38: 20, 39: 17, 40: 29, 41: 17, 42: 14, 43: 27, 44: 5, 45: 17, 46: 16, 47: 21, 48: 8, 49: 31}, 
         11: {0: 13, 1: 13, 2: 31, 3: 10, 4: 28, 5: 23, 6: 31, 7: 28, 8: 27, 9: 25, 10: 13, 12: 23, 13: 23, 14: 13, 15: 29, 16: 7, 17: 20, 18: 20, 19: 11, 20: 22, 21: 23, 22: 30, 23: 27, 24: 20, 25: 10, 26: 33, 27: 6, 28: 19, 29: 30, 30: 25, 31: 16, 32: 31, 33: 16, 34: 5, 35: 5, 36: 30, 37: 33, 38: 33, 39: 27, 40: 18, 41: 13, 42: 8, 43: 21, 44: 16, 45: 10, 46: 8, 47: 25, 48: 11, 49: 23}, 
         12: {0: 19, 1: 12, 2: 12, 3: 15, 4: 22, 5: 24, 6: 26, 7: 26, 8: 25, 9: 10, 10: 10, 11: 23, 13: 18, 14: 28, 15: 21, 16: 29, 17: 21, 18: 31, 19: 12, 20: 30, 21: 16, 22: 17, 23: 19, 24: 4, 25: 33, 26: 21, 27: 21, 28: 19, 29: 10, 30: 33, 31: 16, 32: 13, 33: 25, 34: 17, 35: 25, 36: 15, 37: 38, 38: 11, 39: 18, 40: 40, 41: 23, 42: 22, 43: 36, 44: 11, 45: 27, 46: 26, 47: 27, 48: 17, 49: 41}, 
         13: {0: 10, 1: 12, 2: 15, 3: 23, 4: 5, 5: 6, 6: 9, 7: 8, 8: 6, 9: 10, 10: 15, 11: 23, 12: 18, 14: 17, 15: 6, 16: 30, 17: 4, 18: 17, 19: 15, 20: 13, 21: 2, 22: 8, 23: 4, 24: 20, 25: 27, 26: 10, 27: 25, 28: 4, 29: 16, 30: 15, 31: 7, 32: 13, 33: 34, 34: 20, 35: 28, 36: 11, 37: 20, 38: 19, 39: 4, 40: 31, 41: 32, 42: 28, 43: 23, 44: 9, 45: 18, 46: 19, 47: 9, 48: 12, 49: 29}, 
         14: {0: 9, 1: 16, 2: 31, 3: 21, 4: 21, 5: 15, 6: 23, 7: 20, 8: 19, 9: 24, 10: 18, 11: 13, 12: 28, 13: 17, 15: 23, 16: 17, 17: 13, 18: 7, 19: 16, 20: 10, 21: 18, 22: 26, 23: 21, 24: 26, 25: 11, 26: 28, 27: 18, 28: 13, 29: 31, 30: 13, 31: 13, 32: 30, 33: 29, 34: 15, 35: 18, 36: 28, 37: 21, 38: 34, 39: 22, 40: 13, 41: 26, 42: 21, 43: 9, 44: 17, 45: 2, 46: 4, 47: 15, 48: 10, 49: 13}, 
         15: {0: 16, 1: 17, 2: 14, 3: 29, 4: 2, 5: 9, 6: 6, 7: 7, 8: 6, 9: 11, 10: 20, 11: 29, 12: 21, 13: 6, 14: 23, 16: 36, 17: 9, 18: 21, 19: 20, 20: 16, 21: 6, 22: 5, 23: 2, 24: 23, 25: 33, 26: 5, 27: 31, 28: 10, 29: 16, 30: 18, 31: 13, 32: 12, 33: 40, 34: 25, 35: 34, 36: 9, 37: 20, 38: 19, 39: 2, 40: 37, 41: 37, 42: 33, 43: 27, 44: 14, 45: 24, 46: 25, 47: 11, 48: 18, 49: 34}, 
         16: {0: 20, 1: 20, 2: 38, 3: 14, 4: 35, 5: 30, 6: 37, 7: 35, 8: 33, 9: 32, 10: 19, 11: 7, 12: 29, 13: 30, 14: 17, 15: 36, 17: 27, 18: 24, 19: 18, 20: 27, 21: 30, 22: 37, 23: 34, 24: 26, 25: 9, 26: 40, 27: 9, 28: 26, 29: 37, 30: 30, 31: 23, 32: 38, 33: 16, 34: 12, 35: 4, 36: 37, 37: 38, 38: 39, 39: 34, 40: 17, 41: 14, 42: 9, 43: 23, 44: 23, 45: 14, 46: 13, 47: 31, 48: 18, 49: 23}, 
         17: {0: 7, 1: 12, 2: 19, 3: 23, 4: 8, 5: 3, 6: 10, 7: 8, 8: 6, 9: 13, 10: 15, 11: 20, 12: 21, 13: 4, 14: 13, 15: 9, 16: 27, 18: 12, 19: 14, 20: 9, 21: 5, 22: 12, 23: 8, 24: 21, 25: 24, 26: 14, 27: 24, 28: 2, 29: 20, 30: 12, 31: 6, 32: 18, 33: 34, 34: 18, 35: 26, 36: 15, 37: 17, 38: 23, 39: 8, 40: 27, 41: 31, 42: 26, 43: 19, 44: 10, 45: 15, 46: 16, 47: 6, 48: 10, 49: 25}, 
         18: {0: 12, 1: 20, 2: 32, 3: 27, 4: 19, 5: 12, 6: 19, 7: 16, 8: 15, 9: 25, 10: 23, 11: 20, 12: 31, 13: 17, 14: 7, 15: 21, 16: 24, 17: 12, 19: 21, 20: 5, 21: 18, 22: 25, 23: 20, 24: 31, 25: 17, 26: 26, 27: 25, 28: 13, 29: 33, 30: 6, 31: 15, 32: 30, 33: 36, 34: 21, 35: 25, 36: 28, 37: 14, 38: 36, 39: 21, 40: 17, 41: 33, 42: 28, 43: 6, 44: 20, 45: 9, 46: 11, 47: 10, 48: 15, 49: 13}, 
         19: {0: 9, 1: 3, 2: 20, 3: 8, 4: 20, 5: 18, 6: 24, 7: 22, 8: 21, 9: 14, 10: 2, 11: 11, 12: 12, 13: 15, 14: 16, 15: 20, 16: 18, 17: 14, 18: 21, 20: 21, 21: 14, 22: 20, 23: 18, 24: 10, 25: 20, 26: 23, 27: 11, 28: 12, 29: 19, 30: 24, 31: 8, 32: 20, 33: 19, 34: 6, 35: 15, 36: 20, 37: 31, 38: 21, 39: 18, 40: 27, 41: 17, 42: 13, 43: 25, 44: 6, 45: 14, 46: 14, 47: 20, 48: 6, 49: 29}, 
         20: {0: 11, 1: 19, 2: 29, 3: 28, 4: 14, 5: 7, 6: 14, 7: 11, 8: 10, 9: 23, 10: 22, 11: 22, 12: 30, 13: 13, 14: 10, 15: 16, 16: 27, 17: 9, 18: 5, 19: 21, 21: 15, 22: 21, 23: 16, 24: 30, 25: 21, 26: 21, 27: 27, 28: 11, 29: 30, 30: 3, 31: 14, 32: 27, 33: 38, 34: 23, 35: 28, 36: 24, 37: 11, 38: 33, 39: 17, 40: 22, 41: 35, 42: 30, 43: 11, 44: 19, 45: 13, 46: 14, 47: 5, 48: 15, 49: 17}, 
         21: {0: 10, 1: 11, 2: 13, 3: 22, 4: 6, 5: 8, 6: 10, 7: 9, 8: 8, 9: 8, 10: 14, 11: 23, 12: 16, 13: 2, 14: 18, 15: 6, 16: 30, 17: 5, 18: 18, 19: 14, 20: 15, 22: 7, 23: 4, 24: 18, 25: 28, 26: 10, 27: 25, 28: 5, 29: 14, 30: 17, 31: 7, 32: 12, 33: 34, 34: 19, 35: 28, 36: 9, 37: 22, 38: 18, 39: 4, 40: 32, 41: 31, 42: 27, 43: 24, 44: 8, 45: 19, 46: 20, 47: 11, 48: 12, 49: 31}, 
         22: {0: 18, 1: 17, 2: 9, 3: 28, 4: 7, 5: 13, 6: 11, 7: 12, 8: 11, 9: 7, 10: 19, 11: 30, 12: 17, 13: 8, 14: 26, 15: 5, 16: 37, 17: 12, 18: 25, 19: 20, 20: 21, 21: 7, 23: 5, 24: 20, 25: 36, 26: 3, 27: 31, 28: 12, 29: 11, 30: 23, 31: 14, 32: 7, 33: 39, 34: 26, 35: 35, 36: 4, 37: 25, 38: 14, 39: 4, 40: 40, 41: 36, 42: 33, 43: 31, 44: 14, 45: 27, 46: 27, 47: 16, 48: 19, 49: 38}, 
         23: {0: 14, 1: 15, 2: 13, 3: 26, 4: 3, 5: 8, 6: 7, 7: 8, 8: 7, 9: 9, 10: 18, 11: 27, 12: 19, 13: 4, 14: 21, 15: 2, 16: 34, 17: 8, 18: 20, 19: 18, 20: 16, 21: 4, 22: 5, 24: 21, 25: 32, 26: 6, 27: 29, 28: 8, 29: 15, 30: 18, 31: 11, 32: 11, 33: 38, 34: 23, 35: 32, 36: 8, 37: 21, 38: 18, 39: 1, 40: 35, 41: 35, 42: 31, 43: 26, 44: 12, 45: 23, 46: 23, 47: 11, 48: 16, 49: 33}, 
         24: {0: 19, 1: 11, 2: 16, 3: 12, 4: 24, 5: 25, 6: 28, 7: 28, 8: 26, 9: 12, 10: 8, 11: 20, 12: 4, 13: 20, 14: 26, 15: 23, 16: 26, 17: 21, 18: 31, 19: 10, 20: 30, 21: 18, 22: 20, 23: 21, 25: 30, 26: 24, 27: 17, 28: 19, 29: 14, 30: 33, 31: 16, 32: 17, 33: 21, 34: 14, 35: 22, 36: 18, 37: 39, 38: 15, 39: 20, 40: 38, 41: 19, 42: 18, 43: 35, 44: 11, 45: 25, 46: 25, 47: 28, 48: 16, 49: 40}, 
         25: {0: 18, 1: 22, 2: 39, 3: 21, 4: 32, 5: 26, 6: 34, 7: 31, 8: 30, 9: 32, 10: 22, 11: 10, 12: 33, 13: 27, 14: 11, 15: 33, 16: 9, 17: 24, 18: 17, 19: 20, 20: 21, 21: 28, 22: 36, 23: 32, 24: 30, 26: 38, 27: 16, 28: 23, 29: 39, 30: 23, 31: 21, 32: 38, 33: 25, 34: 16, 35: 13, 36: 37, 37: 31, 38: 42, 39: 32, 40: 8, 41: 23, 42: 18, 43: 14, 44: 24, 45: 9, 46: 8, 47: 26, 48: 17, 49: 13}, 
         26: {0: 20, 1: 20, 2: 11, 3: 31, 4: 7, 5: 14, 6: 9, 7: 11, 8: 11, 9: 11, 10: 23, 11: 33, 12: 21, 13: 10, 14: 28, 15: 5, 16: 40, 17: 14, 18: 26, 19: 23, 20: 21, 21: 10, 22: 3, 23: 6, 24: 24, 25: 38, 27: 34, 28: 14, 29: 13, 30: 23, 31: 17, 32: 9, 33: 42, 34: 29, 35: 38, 36: 6, 37: 24, 38: 16, 39: 6, 40: 42, 41: 40, 42: 36, 43: 32, 44: 17, 45: 29, 46: 30, 47: 16, 48: 22, 49: 39}, 
         27: {0: 17, 1: 14, 2: 31, 3: 5, 4: 31, 5: 27, 6: 34, 7: 32, 8: 30, 9: 25, 10: 12, 11: 6, 12: 21, 13: 25, 14: 18, 15: 31, 16: 9, 17: 24, 18: 25, 19: 11, 20: 27, 21: 25, 22: 31, 23: 29, 24: 17, 25: 16, 26: 34, 28: 22, 29: 29, 30: 30, 31: 18, 32: 31, 33: 10, 34: 5, 35: 5, 36: 31, 37: 38, 38: 31, 39: 28, 40: 24, 41: 8, 42: 2, 43: 27, 44: 17, 45: 16, 46: 14, 47: 29, 48: 13, 49: 29}, 
         28: {0: 6, 1: 10, 2: 18, 3: 21, 4: 9, 5: 5, 6: 12, 7: 10, 8: 8, 9: 12, 10: 13, 11: 19, 12: 19, 13: 4, 14: 13, 15: 10, 16: 26, 17: 2, 18: 13, 19: 12, 20: 11, 21: 5, 22: 12, 23: 8, 24: 19, 25: 23, 26: 14, 27: 22, 29: 19, 30: 14, 31: 4, 32: 17, 33: 32, 34: 17, 35: 25, 36: 14, 37: 19, 38: 22, 39: 8, 40: 27, 41: 29, 42: 25, 43: 20, 44: 8, 45: 14, 46: 15, 47: 8, 48: 8, 49: 26}, 
         29: {0: 22, 1: 17, 2: 2, 3: 25, 4: 18, 5: 22, 6: 22, 7: 23, 8: 22, 9: 7, 10: 18, 11: 30, 12: 10, 13: 16, 14: 31, 15: 16, 16: 37, 17: 20, 18: 33, 19: 19, 20: 30, 21: 14, 22: 11, 23: 15, 24: 14, 25: 39, 26: 13, 27: 29, 28: 19, 30: 32, 31: 18, 32: 4, 33: 35, 34: 25, 35: 34, 36: 7, 37: 36, 38: 3, 39: 14, 40: 45, 41: 33, 42: 31, 43: 39, 44: 15, 45: 31, 46: 31, 47: 25, 48: 22, 49: 45}, 
         30: {0: 14, 1: 22, 2: 31, 3: 31, 4: 16, 5: 9, 6: 15, 7: 12, 8: 12, 9: 25, 10: 25, 11: 25, 12: 33, 13: 15, 14: 13, 15: 18, 16: 30, 17: 12, 18: 6, 19: 24, 20: 3, 21: 17, 22: 23, 23: 18, 24: 33, 25: 23, 26: 23, 27: 30, 28: 14, 29: 32, 31: 17, 32: 29, 33: 41, 34: 26, 35: 31, 36: 26, 37: 8, 38: 35, 39: 19, 40: 23, 41: 38, 42: 33, 43: 11, 44: 22, 45: 15, 46: 17, 47: 7, 48: 18, 49: 17}, 
         31: {0: 4, 1: 5, 2: 18, 3: 17, 4: 12, 5: 10, 6: 16, 7: 14, 8: 12, 9: 11, 10: 9, 11: 16, 12: 16, 13: 7, 14: 13, 15: 13, 16: 23, 17: 6, 18: 15, 19: 8, 20: 14, 21: 7, 22: 14, 23: 11, 24: 16, 25: 21, 26: 17, 27: 18, 28: 4, 29: 18, 30: 17, 32: 17, 33: 28, 34: 13, 35: 21, 36: 15, 37: 23, 38: 21, 39: 11, 40: 27, 41: 25, 42: 21, 43: 21, 44: 5, 45: 13, 46: 13, 47: 12, 48: 5, 49: 26}, 
         32: {0: 21, 1: 17, 2: 2, 3: 27, 4: 14, 5: 19, 6: 18, 7: 19, 8: 18, 9: 6, 10: 19, 11: 31, 12: 13, 13: 13, 14: 30, 15: 12, 16: 38, 17: 18, 18: 30, 19: 20, 20: 27, 21: 12, 22: 7, 23: 11, 24: 17, 25: 38, 26: 9, 27: 31, 28: 17, 29: 4, 30: 29, 31: 17, 33: 37, 34: 26, 35: 35, 36: 3, 37: 32, 38: 7, 39: 10, 40: 44, 41: 35, 42: 33, 43: 37, 44: 14, 45: 30, 46: 31, 47: 22, 48: 21, 49: 43}, 
         33: {0: 27, 1: 22, 2: 37, 3: 11, 4: 40, 5: 37, 6: 44, 7: 42, 8: 40, 9: 32, 10: 19, 11: 16, 12: 25, 13: 34, 14: 29, 15: 40, 16: 16, 17: 34, 18: 36, 19: 19, 20: 38, 21: 34, 22: 39, 23: 38, 24: 21, 25: 25, 26: 42, 27: 10, 28: 32, 29: 35, 30: 41, 31: 28, 32: 37, 34: 15, 35: 12, 36: 38, 37: 49, 38: 36, 39: 37, 40: 33, 41: 2, 42: 8, 43: 37, 44: 25, 45: 26, 46: 25, 47: 39, 48: 24, 49: 38}, 
         34: {0: 12, 1: 9, 2: 26, 3: 6, 4: 25, 5: 22, 6: 29, 7: 26, 8: 25, 9: 20, 10: 7, 11: 5, 12: 17, 13: 20, 14: 15, 15: 25, 16: 12, 17: 18, 18: 21, 19: 6, 20: 23, 21: 19, 22: 26, 23: 23, 24: 14, 25: 16, 26: 29, 27: 5, 28: 17, 29: 25, 30: 26, 31: 13, 32: 26, 33: 15, 35: 9, 36: 26, 37: 34, 38: 27, 39: 23, 40: 23, 41: 12, 42: 8, 43: 24, 44: 12, 45: 13, 46: 12, 47: 24, 48: 8, 49: 27}, 
         35: {0: 19, 1: 18, 2: 35, 3: 10, 4: 33, 5: 29, 6: 37, 7: 34, 8: 33, 9: 29, 10: 16, 11: 5, 12: 25, 13: 28, 14: 18, 15: 34, 16: 4, 17: 26, 18: 25, 19: 15, 20: 28, 21: 28, 22: 35, 23: 32, 24: 22, 25: 13, 26: 38, 27: 5, 28: 25, 29: 34, 30: 31, 31: 21, 32: 35, 33: 12, 34: 9, 36: 35, 37: 39, 38: 36, 39: 32, 40: 21, 41: 10, 42: 5, 43: 25, 44: 21, 45: 15, 46: 14, 47: 30, 48: 16, 49: 26}, 
         36: {0: 19, 1: 17, 2: 5, 3: 27, 4: 11, 5: 17, 6: 15, 7: 16, 8: 15, 9: 6, 10: 19, 11: 30, 12: 15, 13: 11, 14: 28, 15: 9, 16: 37, 17: 15, 18: 28, 19: 20, 20: 24, 21: 9, 22: 4, 23: 8, 24: 18, 25: 37, 26: 6, 27: 31, 28: 14, 29: 7, 30: 26, 31: 15, 32: 3, 33: 38, 34: 26, 35: 35, 37: 29, 38: 10, 39: 7, 40: 42, 41: 35, 42: 33, 43: 34, 44: 14, 45: 29, 46: 29, 47: 19, 48: 20, 49: 41}, 
         37: {0: 22, 1: 29, 2: 34, 3: 39, 4: 18, 5: 14, 6: 14, 7: 13, 8: 14, 9: 30, 10: 33, 11: 33, 12: 38, 13: 20, 14: 21, 15: 20, 16: 38, 17: 17, 18: 14, 19: 31, 20: 11, 21: 22, 22: 25, 23: 21, 24: 39, 25: 31, 26: 24, 27: 38, 28: 19, 29: 36, 30: 8, 31: 23, 32: 32, 33: 49, 34: 34, 35: 39, 36: 29, 38: 39, 39: 22, 40: 30, 41: 46, 42: 41, 43: 18, 44: 28, 45: 24, 46: 25, 47: 11, 48: 26, 49: 24}, 
         38: {0: 25, 1: 20, 2: 5, 3: 26, 4: 21, 5: 25, 6: 25, 7: 26, 8: 25, 9: 10, 10: 20, 11: 33, 12: 11, 13: 19, 14: 34, 15: 19, 16: 39, 17: 23, 18: 36, 19: 21, 20: 33, 21: 18, 22: 14, 23: 18, 24: 15, 25: 42, 26: 16, 27: 31, 28: 22, 29: 3, 30: 35, 31: 21, 32: 7, 33: 36, 34: 27, 35: 36, 36: 10, 37: 39, 39: 17, 40: 48, 41: 34, 42: 32, 43: 42, 44: 17, 45: 34, 46: 34, 47: 28, 48: 24, 49: 48}, 
         39: {0: 14, 1: 14, 2: 12, 3: 26, 4: 4, 5: 9, 6: 8, 7: 9, 8: 8, 9: 8, 10: 17, 11: 27, 12: 18, 13: 4, 14: 22, 15: 2, 16: 34, 17: 8, 18: 21, 19: 18, 20: 17, 21: 4, 22: 4, 23: 1, 24: 20, 25: 32, 26: 6, 27: 28, 28: 8, 29: 14, 30: 19, 31: 11, 32: 10, 33: 37, 34: 23, 35: 32, 36: 7, 37: 22, 38: 17, 40: 36, 41: 34, 42: 31, 43: 27, 44: 12, 45: 23, 46: 24, 47: 12, 48: 16, 49: 34}, 
         40: {0: 22, 1: 28, 2: 45, 3: 29, 4: 35, 5: 28, 6: 36, 7: 32, 8: 32, 9: 38, 10: 29, 11: 18, 12: 40, 13: 31, 14: 13, 15: 37, 16: 17, 17: 27, 18: 17, 19: 27, 20: 22, 21: 32, 22: 40, 23: 35, 24: 38, 25: 8, 26: 42, 27: 24, 28: 27, 29: 45, 30: 23, 31: 27, 32: 44, 33: 33, 34: 23, 35: 21, 36: 42, 37: 30, 38: 48, 39: 36, 41: 31, 42: 26, 43: 12, 44: 30, 45: 13, 46: 13, 47: 27, 48: 23, 49: 7},
         41: {0: 24, 1: 20, 2: 35, 3: 8, 4: 37, 5: 34, 6: 41, 7: 39, 8: 38, 9: 29, 10: 17, 11: 13, 12: 23, 13: 32, 14: 26, 15: 37, 16: 14, 17: 31, 18: 33, 19: 17, 20: 35, 21: 31, 22: 36, 23: 35, 24: 19, 25: 23, 26: 40, 27: 8, 28: 29, 29: 33, 30: 38, 31: 25, 32: 35, 33: 2, 34: 12, 35: 10, 36: 35, 37: 46, 38: 34, 39: 34, 40: 31, 42: 5, 43: 35, 44: 22, 45: 24, 46: 22, 47: 36, 48: 21, 49: 36}, 
         42: {0: 20, 1: 16, 2: 33, 3: 6, 4: 33, 5: 30, 6: 37, 7: 34, 8: 33, 9: 27, 10: 14, 11: 8, 12: 22, 13: 28, 14: 21, 15: 33, 16: 9, 17: 26, 18: 28, 19: 13, 20: 30, 21: 27, 22: 33, 23: 31, 24: 18, 25: 18, 26: 36, 27: 2, 28: 25, 29: 31, 30: 33, 31: 21, 32: 33, 33: 8, 34: 8, 35: 5, 36: 33, 37: 41, 38: 32, 39: 31, 40: 26, 41: 5, 43: 29, 44: 19, 45: 18, 46: 17, 47: 32, 48: 16, 49: 31}, 
         43: {0: 17, 1: 24, 2: 38, 3: 30, 4: 25, 5: 18, 6: 25, 7: 22, 8: 21, 9: 31, 10: 27, 11: 21, 12: 36, 13: 23, 14: 9, 15: 27, 16: 23, 17: 19, 18: 6, 19: 25, 20: 11, 21: 24, 22: 31, 23: 26, 24: 35, 25: 14, 26: 32, 27: 27, 28: 20, 29: 39, 30: 11, 31: 21, 32: 37, 33: 37, 34: 24, 35: 25, 36: 34, 37: 18, 38: 42, 39: 27, 40: 12, 41: 35, 42: 29, 44: 25, 45: 11, 46: 12, 47: 17, 48: 19, 49: 6}, 
         44: {0: 8, 1: 3, 2: 15, 3: 14, 4: 15, 5: 14, 6: 19, 7: 17, 8: 16, 9: 8, 10: 5, 11: 16, 12: 11, 13: 9, 14: 17, 15: 14, 16: 23, 17: 10, 18: 20, 19: 6, 20: 19, 21: 8, 22: 14, 23: 12, 24: 11, 25: 24, 26: 17, 27: 17, 28: 8, 29: 15, 30: 22, 31: 5, 32: 14, 33: 25, 34: 12, 35: 21, 36: 14, 37: 28, 38: 17, 39: 12, 40: 30, 41: 22, 42: 19, 43: 25, 45: 17, 46: 16, 47: 17, 48: 7, 49: 30}, 
         45: {0: 9, 1: 15, 2: 32, 3: 19, 4: 23, 5: 17, 6: 25, 7: 22, 8: 21, 9: 24, 10: 17, 11: 10, 12: 27, 13: 18, 14: 2, 15: 24, 16: 14, 17: 15, 18: 9, 19: 14, 20: 13, 21: 19, 22: 27, 23: 23, 24: 25, 25: 9, 26: 29, 27: 16, 28: 14, 29: 31, 30: 15, 31: 13, 32: 30, 33: 26, 34: 13, 35: 15, 36: 29, 37: 24, 38: 34, 39: 23, 40: 13, 41: 24, 42: 18, 43: 11, 44: 17, 46: 1, 47: 17, 48: 10, 49: 14}, 
         46: {0: 9, 1: 15, 2: 32, 3: 18, 4: 24, 5: 18, 6: 26, 7: 23, 8: 22, 9: 25, 10: 16, 11: 8, 12: 26, 13: 19, 14: 4, 15: 25, 16: 13, 17: 16, 18: 11, 19: 14, 20: 14, 21: 20, 22: 27, 23: 23, 24: 25, 25: 8, 26: 30, 27: 14, 28: 15, 29: 31, 30: 17, 31: 13, 32: 31, 33: 25, 34: 12, 35: 14, 36: 29, 37: 25, 38: 34, 39: 24, 40: 13, 41: 22, 42: 17, 43: 12, 44: 16, 45: 1, 47: 18, 48: 9, 49: 15}, 
         47: {0: 12, 1: 18, 2: 24, 3: 29, 4: 9, 5: 3, 6: 8, 7: 5, 8: 5, 9: 19, 10: 21, 11: 25, 12: 27, 13: 9, 14: 15, 15: 11, 16: 31, 17: 6, 18: 10, 19: 20, 20: 5, 21: 11, 22: 16, 23: 11, 24: 28, 25: 26, 26: 16, 27: 29, 28: 8, 29: 25, 30: 7, 31: 12, 32: 22, 33: 39, 34: 24, 35: 30, 36: 19, 37: 11, 38: 28, 39: 12, 40: 27, 41: 36, 42: 32, 43: 17, 44: 17, 45: 17, 46: 18, 48: 15, 49: 23}, 
         48: {0: 3, 1: 5, 2: 22, 3: 13, 4: 17, 5: 13, 6: 20, 7: 18, 8: 17, 9: 15, 10: 8, 11: 11, 12: 17, 13: 12, 14: 10, 15: 18, 16: 18, 17: 10, 18: 15, 19: 6, 20: 15, 21: 12, 22: 19, 23: 16, 24: 16, 25: 17, 26: 22, 27: 13, 28: 8, 29: 22, 30: 18, 31: 5, 32: 21, 33: 24, 34: 8, 35: 16, 36: 20, 37: 26, 38: 24, 39: 16, 40: 23, 41: 21, 42: 16, 43: 19, 44: 7, 45: 10, 46: 9, 47: 15, 49: 24}, 
         49: {0: 22, 1: 29, 2: 44, 3: 33, 4: 32, 5: 25, 6: 32, 7: 29, 8: 28, 9: 37, 10: 31, 11: 23, 12: 41, 13: 29, 14: 13, 15: 34, 16: 23, 17: 25, 18: 13, 19: 29, 20: 17, 21: 31, 22: 38, 23: 33, 24: 40, 25: 13, 26: 39, 27: 29, 28: 26, 29: 45, 30: 17, 31: 26, 32: 43, 33: 38, 34: 27, 35: 26, 36: 41, 37: 24, 38: 48, 39: 34, 40: 7, 41: 36, 42: 31, 43: 6, 44: 30, 45: 14, 46: 15, 47: 23, 48: 24}
        }
         

    lista_citta= [  [8, 0],
                    [15, 17],
                    [14, -10],
                    [-1, 15],
                    [-5, 9],
                    [-5, 17],
                    [-6, 14],
                    [-5, 13],
                    [11, 11],
                    [11, -2],
                    [4, -13],
                    [19, 5],
                    [1, 10],
                    [-7, -6],
                    [1, 16],
                    [3, -20],
                    [-2, 7],
                    [-12, -1],
                    [9, -3],
                    [-11, 4],
                    [3, 10],
                    [6, 17],
                    [2, 14],
                    [19, 1],
                    [-6, -17],
                    [4, 20],
                    [10, -14],
                    [0, 6],
                    [17, 15],
                    [-14, 5],
                    [3, 3],
                    [13, 17],
                    [19, -20],
                    [8, -9],
                    [7, -18],
                    [10, 17],
                    [-19, 12],
                    [20, 16],
                    [3, 14],
                    [-14, -18],
                    [17, -18],
                    [12, -16],
                    [-16, -6],
                    [8, 3],
                    [-5, -8],
                    [-4, -9],
                    [-8, 9],
                    [3, -2],
                    [-19, -12]
                ]

    i = 1
    dizionario_citta= {}
    for element in lista_citta: 
        cliente= Cliente(element[0],element[1],dizionario_stazioni,i)
        dizionario_citta[i]= cliente
        i += 1

    Percorso= [0, 48, 44, 1, 19, 10, 24, 12, 9, 36, 32, '1S', 2, 29, 38, 3, 34, 27, '2S', 42, 41, 33, 35, 11, 16, '2S', 37, 30, 18, 43, 49, 40, '3S', 25, 46, 45, 14, 20, 47, 8, 7, 6, '4S', 26, 22, 39, 15, 4, 23, 21, 13, 5, 17, 28, 31, 0]
    max_lung= len(Percorso)
    lunghPercorso= len(Percorso)
    for i in range(0,10000):

        archi_scelti, nuovo_percorso= two_opt(Percorso, dizionario_citta, dizionario_stazioni)
        if len(nuovo_percorso) > lunghPercorso:
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
            print("Iterazione: " + str(i))
            print("Percorso: " + str(Percorso))
            print("archi_scelti" + str(archi_scelti))
            print("nuovo_percorso" + str(nuovo_percorso))
            print("\nlunghezza percorso: " + str(len(Percorso)) + "\n")
            print("lunghezza nuovo_percorso: " + str(len(nuovo_percorso)) + "\n")

            time.sleep(5000)
            if len(nuovo_percorso) > max_lung:
                max_lung= len(nuovo_percorso)

            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
        else:
            print("---------------------------------------------------")
            print("Iterazione: " + str(i))
            print("Percorso: " + str(Percorso))
            print("indice archi_scelti" + str(archi_scelti))
            print("arco1: (" + str(Percorso[archi_scelti[0][0]]) + ", " + str(Percorso[archi_scelti[0][1]]) + " )")
            print("arco2: (" + str(Percorso[archi_scelti[1][0]]) + ", " + str(Percorso[archi_scelti[1][1]]) + " )")
            print("nuovo_percorso" + str(nuovo_percorso))
            print("lunghezza: " + str(len(nuovo_percorso)) + "\n")
            print("---------------------------------------------------")
        
        Percorso= nuovo_percorso
    
    print("max_lung: " + str(max_lung))