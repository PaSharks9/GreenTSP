
import random
import time
import math
from Cliente import euclidean_distance,Cliente, soluzione_accettabile, calcola_costo, soluzione_accettabile_debug
from LocalSearch import two_opt
from PlotGenerator import print_2_opt_arc_selected

def simulated_annealing(dizionario_soluzione, dizionario_citta, dizionario_stazioni, G, k, Temperatura, decreaseT,Tfrozen, numero_iterazioni):

    # Inizializzo i dati di riferimento

    dizionario_sol_migliori= {}

    # Dati soluzione iniziale
    soluzione_iniziale= dizionario_soluzione.get('percorso')
    distanza_soluzione_iniziale= dizionario_soluzione.get('distanza')
    tempo_totale_sol_iniziale= dizionario_soluzione.get('tempo_tot')

    # Inizializzo le 3 soluzioni di riferimento
    # soluzione_precedente= soluzione_iniziale
    soluzione_corrente= soluzione_iniziale
    soluzione_migliore= soluzione_corrente

    # Inizializzo i 3 costi di riferimento
    # costo_soluzione_precedente= tempo_totale_sol_iniziale
    costo_soluzione_corrente= tempo_totale_sol_iniziale
    costo_soluzione_migliore= costo_soluzione_corrente

    # Inizializzo le 3 distanze totali percorse di riferimento
    distanza_percorsa_soluzione_corrente= distanza_soluzione_iniziale
    distanza_percorsa_migliore= distanza_soluzione_iniziale
    # distanza_percorsa_precedente= distanza_soluzione_iniziale

    Temperature= Temperatura
    
    # Iterazione_fallimento serve per cercare di raggiungere una situazione stabile entro Iterazione//2, altrimenti si ripristina lo stato precedente(temperatura e soluzioni) e si riparte
    # iterazione_fallimento= 0

    j= 0 # parametro per salvare la chiave del numero delle soluzioni di evoluzione

    start_esecuzione= time.time()
    while Temperature > Tfrozen:

        """check_time= time.time() - start_esecuzione

        if iterazione_fallimento == numero_iterazioni //2 and check_time < 1200:
            # Ripristino la temperatura allo stato precedente
            Temperature = Temperature * decreaseT"""

        iteration= 0
        # iterazione_fallimento= 0
        # Cercare un numero di iterazioni per considerarsi in equilibrio
        while iteration < numero_iterazioni:  
            print("iterazione: " + str(iteration))
            # ricerca random soluzione nell'intorno 2-opt
            archi_scelti, new_solution= two_opt(soluzione_corrente, dizionario_citta, dizionario_stazioni)
            costo_new_solution, distanza_percorsa_new_sol= calcola_costo(G,k,dizionario_citta,dizionario_stazioni, new_solution)  # I costi sono dati dal tempo totale speso per il percorso( compreso il tempo di ricarica )

            delta_E= costo_new_solution - costo_soluzione_corrente
            #print("delta_E: "+ str(delta_E))

            if delta_E <= 0:
                
                # Siccome ho un miglioramento con la nuova soluzione rispetto a quella corrente, aggiorno le soluzioni

                # La soluzione corrente diventa quella precedente ( serve tenerne traccia per le condizioni di stabilita )
                """soluzione_precedente= soluzione_corrente
                costo_soluzione_precedente= costo_soluzione_corrente
                distanza_percorsa_precedente= distanza_percorsa_soluzione_corrente"""

                # La nuova soluzione trovata diventa quella corrente
                soluzione_precedente= soluzione_corrente
                costo_soluzione_precedente= costo_soluzione_corrente

                soluzione_corrente= new_solution
                costo_soluzione_corrente= costo_new_solution
                distanza_percorsa_soluzione_corrente= distanza_percorsa_new_sol


                # Ora controllo che la soluzione corrente sia migliore della soluzione migliore, prima però devo verificare che la soluzione corrente (ex new_solution) sia anche accettabile 
                # in quanto la soluzione_migliore deve essere SEMPRE accettabile in quanto è quella ritornata dall'algoritmo quando finisce

                risultato_correttezza= soluzione_accettabile(soluzione_corrente, G, k, dizionario_citta, dizionario_stazioni)
                
                if risultato_correttezza and costo_soluzione_corrente < costo_soluzione_migliore :
                    
                    # In archi_scelti ho gli indici, ora tiro fuori i nodi relativi, per tenere traccia di quali archi scelti hanno portato al miglioramento, mi serve per controllare il corretto funzionamento
                    arco1= [soluzione_precedente[archi_scelti[0][0]], soluzione_precedente[archi_scelti[0][1]]]
                    arco2= [soluzione_precedente[archi_scelti[1][0]], soluzione_precedente[archi_scelti[1][1]]]
                    
                    archi_scelti= [arco1,arco2]
                    print("iteration:" + str(iteration))
                    print("Temperature: " + str(Temperature))
                    print("soluzione_precedente:  " + str(soluzione_precedente))
                    print("nuova_soluzione_trovata: " + str(soluzione_corrente))
                    print("soluzione_migliore: " + str(soluzione_migliore))
                    print("Archi_scelti: " + str(archi_scelti))
                    #time.sleep(60)
                    j +=1
                    
                    dizionario_sol_migliori[j]= [soluzione_migliore, costo_soluzione_migliore, soluzione_corrente, costo_soluzione_corrente, soluzione_precedente, costo_soluzione_precedente, Temperature, iteration, archi_scelti]

                    soluzione_migliore= soluzione_corrente
                    costo_soluzione_migliore= costo_soluzione_corrente
                    distanza_percorsa_migliore= distanza_percorsa_soluzione_corrente

            else:
                # Se sono qui la soluzione nuova che ho trovato non è migliore di quella corrente

                random_choice= round(random.random(),2)
                
                #print("random_choice: "+ str(random_choice))
                exponential_value= math.exp(-delta_E/Temperature)
                #print("exponential_value: " + str(exponential_value))

                if random_choice < exponential_value:
                    # Se random_choice è minore del valore esponenziale allora cambio soluzione corrente con quella nuova, anche se ciò non comporta un miglioramento
                    # questo viene fatto per provare a sfuggire agli eventuali ottimi locali

                    """soluzione_precedente= soluzione_corrente
                    costo_soluzione_precedente= costo_soluzione_corrente
                    distanza_percorsa_precedente= distanza_percorsa_soluzione_corrente"""

                    soluzione_corrente= new_solution
                    costo_soluzione_corrente= costo_new_solution
                    distanza_percorsa_soluzione_corrente= distanza_percorsa_new_sol

            
            iteration += 1
            # !!!!!!!!!Valutare se togliere questa cosa o no, va contro all'idea di ammissibilità di soluzione peggiorativa per evitare gli ottimi locali!!!!!!!!!!
             
            # Uscito dal controllo sul deltaE, controllo se sono nel caso per verificare la correttezza della soluzione        
            # Per aver raggiunto l'equilibrio la soluzione corrente deve essere ammissibile, quindi devo fare un controllo sull'ammissibilità della soluzione, altrimenti continuo a rimanere nel ciclo
            """if iteration == numero_iterazioni - 1:
                # Se siamo nell'ultima iterazione devo controllare che la soluzione sia accettabile 
                if soluzione_accettabile(soluzione_corrente, G, k, dizionario_citta, dizionario_stazioni):
                    # Se la soluzione è accettabile, aumento iteration e usciro dal ciclo delle iterazioni in quanto siamo in una situazione stabile
                    iteration += 1
                else:
                    if iterazione_fallimento == numero_iterazioni // 2:
                        # Se non è riuscito a rientrare in una situazione di stabilità torno nello stato stabile precedente e rifaccio la computazione, sperando che la componente casuale mi faccia uscire dal loop
                        soluzione_corrente= soluzione_precedente
                        costo_soluzione_corrente= costo_soluzione_precedente
                        distanza_percorsa_soluzione_corrente= distanza_percorsa_precedente
                        break   
                    
                    print("soluzione non accettabile, continuo a iterare anche se dovrei abbassare la T")
                    iterazione_fallimento += 1
                # Se invece la soluzione corrente non è accettabile alla fine delle n iterazioni, non siamo in una situazione di equilibrio (in quanto la soluzione non è accettabile) e quindi non aumento il contatore e continuo a iterare fino a quando non trovo una soluzione accettabile
            else:
                iteration += 1"""
        
        # Finito While
        Temperature= Temperature * decreaseT
        print("\n ==================================================================")    
    
    end_esecuzione= time.time()

    dizionario_SA= {}

    dizionario_SA['Percorso'] = soluzione_migliore
    dizionario_SA['Distanza Totale']= distanza_percorsa_migliore
    dizionario_SA['Tempo Totale']= costo_soluzione_migliore
    dizionario_SA['Tempo Ricarica']= costo_soluzione_migliore - distanza_percorsa_migliore
    dizionario_SA['Tempo Esecuzione']= end_esecuzione - start_esecuzione

    return dizionario_SA, dizionario_sol_migliori


if __name__ == "__main__":

   # N_CITIES= 50
    Max_Axis= 50
    k= 141
    dizionario_stazioni = {1: [25, 25], 2: [25, -25], 3: [-25, -25], 4: [-25, 25] }
    lista_citta=[
                    [-24, 12],
                    [27, 1],
                    [-10, -34],
                    [-50, -18],
                    [-9, -15],
                    [21, -19],
                    [-35, -37],
                    [-6, 8],
                    [36, -16],
                    [-26, -18],
                    [3, -8],
                    [-19, -38],
                    [8, 28],
                    [-27, -32],
                    [42, 21],
                    [36, 36],
                    [-37, -31],
                    [21, -36],
                    [6, 26],
                    [-7, 21],
                    [-50, -31],
                    [-36, 7],
                    [49, 28],
                    [3, 48],
                    [20, -34],
                    [15, -13],
                    [-26, 20],
                    [44, 42],
                    [25, -44],
                    [6, -35],
                    [-42, 29],
                    [9, 8],
                    [40, -37],
                    [-26, 22],
                    [31, -27],
                    [-41, 7],
                    [18, 37],
                    [42, 16],
                    [-10, 7],
                    [32, 6],
                    [-3, 21],
                    [0, -4],
                    [-48, 38],
                    [-17, 4],
                    [-48, 16],
                    [17, -35],
                    [-31, 21],
                    [-45, -47],
                    [-39, 34]
                ]

    G={ 
        0: {1: 26, 2: 27, 3: 35, 4: 53, 5: 17, 6: 28, 7: 50, 8: 10, 9: 39, 10: 31, 11: 8, 12: 42, 13: 29, 14: 41, 15: 46, 16: 50, 17: 48, 18: 41, 19: 26, 20: 22, 21: 58, 22: 36, 23: 56, 24: 48, 25: 39, 26: 19, 27: 32, 28: 60, 29: 50, 30: 35, 31: 51, 32: 12, 33: 54, 34: 34, 35: 41, 36: 41, 37: 41, 38: 44, 39: 12, 40: 32, 41: 21, 42: 4, 43: 61, 44: 17, 45: 50, 46: 38, 47: 37, 48: 65, 49: 51},
        1: {0: 26, 2: 52, 3: 48, 4: 39, 5: 30, 6: 54, 7: 50, 8: 18, 9: 66, 10: 30, 11: 33, 12: 50, 13: 35, 14: 44, 15: 66, 16: 64, 17: 44, 18: 65, 19: 33, 20: 19, 21: 50, 22: 13, 23: 74, 24: 45, 25: 63, 26: 46, 27: 8, 28: 74, 29: 74, 30: 55, 31: 24, 32: 33, 33: 80, 34: 10, 35: 67, 36: 17, 37: 48, 38: 66, 39: 14, 40: 56, 41: 22, 42: 28, 43: 35, 44: 10, 45: 24, 46: 62, 47: 11, 48: 62, 49: 26},
        2: {0: 27, 1: 52, 3: 50, 4: 79, 5: 39, 6: 20, 7: 72, 8: 33, 9: 19, 10: 56, 11: 25, 12: 60, 13: 33, 14: 63, 15: 25, 16: 36, 17: 71, 18: 37, 19: 32, 20: 39, 21: 83, 22: 63, 23: 34, 24: 52, 25: 35, 26: 18, 27: 56, 28: 44, 29: 45, 30: 41, 31: 74, 32: 19, 33: 40, 34: 57, 35: 28, 36: 68, 37: 37, 38: 21, 39: 37, 40: 7, 41: 36, 42: 27, 43: 83, 44: 44, 45: 76, 46: 37, 47: 61, 48: 86, 49: 73},
        3: {0: 35, 1: 48, 2: 50, 4: 43, 5: 19, 6: 34, 7: 25, 8: 42, 9: 49, 10: 22, 11: 29, 12: 9, 13: 64, 14: 17, 15: 75, 16: 83, 17: 27, 18: 31, 19: 62, 20: 55, 21: 40, 22: 48, 23: 85, 24: 83, 25: 30, 26: 32, 27: 56, 28: 93, 29: 36, 30: 16, 31: 70, 32: 46, 33: 50, 34: 58, 35: 41, 36: 51, 37: 76, 38: 72, 39: 41, 40: 58, 41: 55, 42: 31, 43: 81, 44: 38, 45: 62, 46: 27, 47: 58, 48: 37, 49: 73},
        4: {0: 53, 1: 39, 2: 79, 3: 43, 5: 41, 6: 71, 7: 24, 8: 51, 9: 86, 10: 24, 11: 53, 12: 36, 13: 74, 14: 26, 15: 99, 16: 101, 17: 18, 18: 73, 19: 71, 20: 58, 21: 13, 22: 28, 23: 109, 24: 84, 25: 71, 26: 65, 27: 44, 28: 111, 29: 79, 30: 58, 31: 47, 32: 64, 33: 91, 34: 46, 35: 81, 36: 26, 37: 87, 38: 98, 39: 47, 40: 85, 41: 61, 42: 51, 43: 56, 44: 39, 45: 34, 46: 69, 47: 43, 48: 29, 49: 53},
        5: {0: 17, 1: 30, 2: 39, 3: 19, 4: 41, 6: 30, 7: 34, 8: 23, 9: 45, 10: 17, 11: 13, 12: 25, 13: 46, 14: 24, 15: 62, 16: 68, 17: 32, 18: 36, 19: 43, 20: 36, 21: 44, 22: 34, 23: 72, 24: 64, 25: 34, 26: 24, 27: 38, 28: 77, 29: 44, 30: 25, 31: 55, 32: 29, 33: 53, 34: 40, 35: 41, 36: 38, 37: 58, 38: 59, 39: 22, 40: 46, 41: 36, 42: 14, 43: 65, 44: 20, 45: 49, 46: 32, 47: 42, 48: 48, 49: 57},
        6: {0: 28, 1: 54, 2: 20, 3: 34, 4: 71, 5: 30, 7: 58, 8: 38, 9: 15, 10: 47, 11: 21, 12: 44, 13: 48, 14: 49, 15: 45, 16: 57, 17: 59, 18: 17, 19: 47, 20: 48, 21: 72, 22: 62, 23: 54, 24: 69, 25: 15, 26: 8, 27: 61, 28: 65, 29: 25, 30: 21, 31: 79, 32: 29, 33: 26, 34: 62, 35: 12, 36: 67, 37: 56, 38: 40, 39: 40, 40: 27, 41: 46, 42: 25, 43: 89, 44: 44, 45: 77, 46: 16, 47: 65, 48: 71, 49: 80},
        7: {0: 50, 1: 50, 2: 72, 3: 25, 4: 24, 5: 34, 6: 58, 8: 53, 9: 74, 10: 21, 11: 47, 12: 16, 13: 77, 14: 9, 15: 96, 16: 101, 17: 6, 18: 56, 19: 75, 20: 64, 21: 16, 22: 44, 23: 106, 24: 93, 25: 55, 26: 55, 27: 57, 28: 111, 29: 60, 30: 41, 31: 66, 32: 62, 33: 75, 34: 59, 35: 66, 36: 44, 37: 91, 38: 93, 39: 50, 40: 79, 41: 66, 42: 48, 43: 76, 44: 44, 45: 54, 46: 52, 47: 58, 48: 14, 49: 71},
        8: {0: 10, 1: 18, 2: 33, 3: 42, 4: 51, 5: 23, 6: 38, 7: 53, 9: 48, 10: 32, 11: 18, 12: 47, 13: 24, 14: 45, 15: 49, 16: 50, 17: 49, 18: 51, 19: 21, 20: 13, 21: 58, 22: 30, 23: 58, 24: 41, 25: 49, 26: 29, 27: 23, 28: 60, 29: 60, 30: 44, 31: 41, 32: 15, 33: 64, 34: 24, 35: 50, 36: 35, 37: 37, 38: 48, 39: 4, 40: 38, 41: 13, 42: 13, 43: 51, 44: 11, 45: 42, 46: 48, 47: 28, 48: 67, 49: 42},
        9: {0: 39, 1: 66, 2: 19, 3: 49, 4: 86, 5: 45, 6: 15, 7: 74, 8: 48, 10: 62, 11: 33, 12: 59, 13: 52, 14: 65, 15: 37, 16: 52, 17: 74, 18: 25, 19: 51, 20: 56, 21: 87, 22: 75, 23: 45, 24: 72, 25: 24, 26: 21, 27: 71, 28: 58, 29: 30, 30: 35, 31: 90, 32: 36, 33: 21, 34: 72, 35: 12, 36: 80, 37: 55, 38: 32, 39: 51, 40: 22, 41: 53, 42: 37, 43: 99, 44: 56, 45: 89, 46: 26, 47: 76, 48: 86, 49: 90},
        10: {0: 31, 1: 30, 2: 56, 3: 22, 4: 24, 5: 17, 6: 47, 7: 21, 8: 32, 9: 62, 11: 30, 12: 21, 13: 57, 14: 14, 15: 78, 16: 82, 17: 17, 18: 50, 19: 54, 20: 43, 21: 27, 22: 26, 23: 87, 24: 72, 25: 48, 26: 41, 27: 38, 28: 92, 29: 57, 30: 36, 31: 49, 32: 43, 33: 68, 34: 40, 35: 57, 36: 29, 37: 70, 38: 76, 39: 29, 40: 62, 41: 45, 42: 29, 43: 60, 44: 23, 45: 40, 46: 46, 47: 39, 48: 34, 49: 53},
        11: {0: 8, 1: 33, 2: 25, 3: 29, 4: 53, 5: 13, 6: 21, 7: 47, 8: 18, 9: 33, 10: 30, 12: 37, 13: 36, 14: 38, 15: 48, 16: 55, 17: 46, 18: 33, 19: 34, 20: 30, 21: 57, 22: 41, 23: 58, 24: 56, 25: 31, 26: 13, 27: 40, 28: 64, 29: 42, 30: 27, 31: 58, 32: 17, 33: 47, 34: 41, 35: 33, 36: 46, 37: 47, 38: 45, 39: 19, 40: 32, 41: 29, 42: 5, 43: 68, 44: 23, 45: 56, 46: 30, 47: 44, 48: 61, 49: 59},
        12: {0: 42, 1: 50, 2: 60, 3: 9, 4: 36, 5: 25, 6: 44, 7: 16, 8: 47, 9: 59, 10: 21, 11: 37, 13: 71, 14: 10, 15: 84, 16: 92, 17: 19, 18: 40, 19: 68, 20: 60, 21: 31, 22: 48, 23: 94, 24: 88, 25: 39, 26: 42, 27: 58, 28: 101, 29: 44, 30: 25, 31: 70, 32: 53, 33: 59, 34: 60, 35: 51, 36: 50, 37: 83, 38: 81, 39: 45, 40: 67, 41: 61, 42: 38, 43: 81, 44: 42, 45: 61, 46: 36, 47: 60, 48: 27, 49: 74},
        13: {0: 29, 1: 35, 2: 33, 3: 64, 4: 74, 5: 46, 6: 48, 7: 77, 8: 24, 9: 52, 10: 57, 11: 36, 12: 71, 14: 69, 15: 34, 16: 29, 17: 74, 18: 65, 19: 2, 20: 16, 21: 82, 22: 48, 23: 41, 24: 20, 25: 63, 26: 41, 27: 34, 28: 38, 29: 73, 30: 63, 31: 50, 32: 20, 33: 72, 34: 34, 35: 59, 36: 53, 37: 13, 38: 36, 39: 27, 40: 32, 41: 13, 42: 32, 43: 56, 44: 34, 45: 57, 46: 63, 47: 39, 48: 91, 49: 47},
        14: {0: 41, 1: 44, 2: 63, 3: 17, 4: 26, 5: 24, 6: 49, 7: 9, 8: 45, 9: 65, 10: 14, 11: 38, 12: 10, 13: 69, 15: 87, 16: 92, 17: 10, 18: 48, 19: 66, 20: 56, 21: 23, 22: 40, 23: 96, 24: 85, 25: 47, 26: 46, 27: 52, 28: 102, 29: 53, 30: 33, 31: 62, 32: 53, 33: 67, 34: 54, 35: 58, 36: 41, 37: 82, 38: 84, 39: 42, 40: 70, 41: 58, 42: 38, 43: 73, 44: 37, 45: 52, 46: 44, 47: 53, 48: 23, 49: 67},
        15: {0: 46, 1: 66, 2: 25, 3: 75, 4: 99, 5: 62, 6: 45, 7: 96, 8: 49, 9: 37, 10: 78, 11: 48, 12: 84, 13: 34, 14: 87, 16: 16, 17: 94, 18: 60, 19: 36, 20: 49, 21: 105, 22: 79, 23: 9, 24: 47, 25: 59, 26: 43, 27: 68, 28: 21, 29: 67, 30: 66, 31: 84, 32: 35, 33: 58, 34: 68, 35: 49, 36: 84, 37: 28, 38: 5, 39: 53, 40: 18, 41: 45, 42: 48, 43: 91, 44: 61, 45: 90, 46: 61, 47: 73, 48: 110, 49: 82},
        16: {0: 50, 1: 64, 2: 36, 3: 83, 4: 101, 5: 68, 6: 57, 7: 101, 8: 50, 9: 52, 10: 82, 11: 55, 12: 92, 13: 29, 14: 92, 15: 16, 17: 99, 18: 73, 19: 31, 20: 45, 21: 109, 22: 77, 23: 15, 24: 35, 25: 71, 26: 53, 27: 64, 28: 10, 29: 80, 30: 77, 31: 78, 32: 38, 33: 73, 34: 63, 35: 63, 36: 82, 37: 18, 38: 20, 39: 54, 40: 30, 41: 41, 42: 53, 43: 84, 44: 61, 45: 86, 46: 73, 47: 68, 48: 115, 49: 75},
        17: {0: 48, 1: 44, 2: 71, 3: 27, 4: 18, 5: 32, 6: 59, 7: 6, 8: 49, 9: 74, 10: 17, 11: 46, 12: 19, 13: 74, 14: 10, 15: 94, 16: 99, 18: 58, 19: 71, 20: 60, 21: 13, 22: 38, 23: 104, 24: 88, 25: 57, 26: 55, 27: 52, 28: 109, 29: 63, 30: 43, 31: 60, 32: 60, 33: 77, 34: 54, 35: 68, 36: 38, 37: 87, 38: 91, 39: 46, 40: 78, 41: 62, 42: 45, 43: 69, 44: 40, 45: 48, 46: 54, 47: 52, 48: 17, 49: 65},
        18: {0: 41, 1: 65, 2: 37, 3: 31, 4: 73, 5: 36, 6: 17, 7: 56, 8: 51, 9: 25, 10: 50, 11: 33, 12: 40, 13: 65, 14: 48, 15: 60, 16: 73, 17: 58, 19: 63, 20: 63, 21: 71, 22: 71, 23: 69, 24: 85, 25: 2, 26: 23, 27: 73, 28: 81, 29: 8, 30: 15, 31: 90, 32: 45, 33: 19, 34: 74, 35: 13, 36: 75, 37: 73, 38: 56, 39: 53, 40: 43, 41: 61, 42: 38, 43: 101, 44: 55, 45: 86, 46: 4, 47: 77, 48: 66, 49: 92},
        19: {0: 26, 1: 33, 2: 32, 3: 62, 4: 71, 5: 43, 6: 47, 7: 75, 8: 21, 9: 51, 10: 54, 11: 34, 12: 68, 13: 2, 14: 66, 15: 36, 16: 31, 17: 71, 18: 63, 20: 13, 21: 79, 22: 46, 23: 43, 24: 22, 25: 61, 26: 40, 27: 32, 28: 41, 29: 72, 30: 61, 31: 48, 32: 18, 33: 71, 34: 32, 35: 58, 36: 50, 37: 16, 38: 37, 39: 24, 40: 32, 41: 10, 42: 30, 43: 55, 44: 31, 45: 54, 46: 61, 47: 37, 48: 89, 49: 45},
        20: {0: 22, 1: 19, 2: 39, 3: 55, 4: 58, 5: 36, 6: 48, 7: 64, 8: 13, 9: 56, 10: 43, 11: 30, 12: 60, 13: 16, 14: 56, 15: 49, 16: 45, 17: 60, 18: 63, 19: 13, 21: 67, 22: 32, 23: 56, 24: 28, 25: 61, 26: 40, 27: 19, 28: 55, 29: 72, 30: 57, 31: 35, 32: 20, 33: 74, 34: 19, 35: 61, 36: 36, 37: 29, 38: 49, 39: 14, 40: 41, 41: 4, 42: 25, 43: 44, 44: 19, 45: 41, 46: 60, 47: 24, 48: 77, 49: 34},
        21: {0: 58, 1: 50, 2: 83, 3: 40, 4: 13, 5: 44, 6: 72, 7: 16, 8: 58, 9: 87, 10: 27, 11: 57, 12: 31, 13: 82, 14: 23, 15: 105, 16: 109, 17: 13, 18: 71, 19: 79, 20: 67, 22: 40, 23: 115, 24: 95, 25: 70, 26: 67, 27: 56, 28: 119, 29: 76, 30: 56, 31: 60, 32: 70, 33: 90, 34: 58, 35: 81, 36: 39, 37: 96, 38: 103, 39: 55, 40: 89, 41: 70, 42: 56, 43: 69, 44: 48, 45: 47, 46: 67, 47: 55, 48: 16, 49: 65},
        22: {0: 36, 1: 13, 2: 63, 3: 48, 4: 28, 5: 34, 6: 62, 7: 44, 8: 30, 9: 75, 10: 26, 11: 41, 12: 48, 13: 48, 14: 40, 15: 79, 16: 77, 17: 38, 18: 71, 19: 46, 20: 32, 21: 40, 23: 87, 24: 56, 25: 69, 26: 54, 27: 16, 28: 87, 29: 79, 30: 59, 31: 22, 32: 45, 33: 87, 34: 18, 35: 75, 36: 5, 37: 61, 38: 78, 39: 26, 40: 68, 41: 35, 42: 37, 43: 33, 44: 19, 45: 15, 46: 67, 47: 14, 48: 54, 49: 27},
        23: {0: 56, 1: 74, 2: 34, 3: 85, 4: 109, 5: 72, 6: 54, 7: 106, 8: 58, 9: 45, 10: 87, 11: 58, 12: 94, 13: 41, 14: 96, 15: 9, 16: 15, 17: 104, 18: 69, 19: 43, 20: 56, 21: 115, 22: 87, 24: 50, 25: 68, 26: 53, 27: 75, 28: 14, 29: 75, 30: 76, 31: 91, 32: 44, 33: 65, 34: 75, 35: 57, 36: 92, 37: 32, 38: 13, 39: 62, 40: 27, 41: 52, 42: 58, 43: 97, 44: 70, 45: 97, 46: 70, 47: 80, 48: 120, 49: 88},
        24: {0: 48, 1: 45, 2: 52, 3: 83, 4: 84, 5: 64, 6: 69, 7: 93, 8: 41, 9: 72, 10: 72, 11: 56, 12: 88, 13: 20, 14: 85, 15: 47, 16: 35, 17: 88, 18: 85, 19: 22, 20: 28, 21: 95, 22: 56, 23: 50, 25: 83, 26: 62, 27: 40, 28: 41, 29: 94, 30: 83, 31: 48, 32: 40, 33: 92, 34: 38, 35: 80, 36: 60, 37: 18, 38: 50, 39: 43, 40: 51, 41: 27, 42: 52, 43: 51, 44: 48, 45: 60, 46: 84, 47: 43, 48: 106, 49: 44},
        25: {0: 39, 1: 63, 2: 35, 3: 30, 4: 71, 5: 34, 6: 15, 7: 55, 8: 49, 9: 24, 10: 48, 11: 31, 12: 39, 13: 63, 14: 47, 15: 59, 16: 71, 17: 57, 18: 2, 19: 61, 20: 61, 21: 70, 22: 69, 23: 68, 24: 83, 26: 21, 27: 70, 28: 79, 29: 11, 30: 14, 31: 88, 32: 43, 33: 20, 34: 72, 35: 13, 36: 73, 37: 71, 38: 54, 39: 50, 40: 41, 41: 59, 42: 36, 43: 99, 44: 53, 45: 84, 46: 3, 47: 75, 48: 66, 49: 90},
        26: {0: 19, 1: 46, 2: 18, 3: 32, 4: 65, 5: 24, 6: 8, 7: 55, 8: 29, 9: 21, 10: 41, 11: 13, 12: 42, 13: 41, 14: 46, 15: 43, 16: 53, 17: 55, 18: 23, 19: 40, 20: 40, 21: 67, 22: 54, 23: 53, 24: 62, 25: 21, 27: 52, 28: 62, 29: 32, 30: 23, 31: 70, 32: 21, 33: 34, 34: 53, 35: 21, 36: 59, 37: 50, 38: 39, 39: 32, 40: 25, 41: 38, 42: 17, 43: 81, 44: 36, 45: 69, 46: 22, 47: 57, 48: 68, 49: 71},
        27: {0: 32, 1: 8, 2: 56, 3: 56, 4: 44, 5: 38, 6: 61, 7: 57, 8: 23, 9: 71, 10: 38, 11: 40, 12: 58, 13: 34, 14: 52, 15: 68, 16: 64, 17: 52, 18: 73, 19: 32, 20: 19, 21: 56, 22: 16, 23: 75, 24: 40, 25: 70, 26: 52, 28: 73, 29: 81, 30: 63, 31: 18, 32: 37, 33: 87, 34: 2, 35: 73, 36: 19, 37: 47, 38: 68, 39: 20, 40: 59, 41: 23, 42: 35, 43: 28, 44: 18, 45: 22, 46: 69, 47: 5, 48: 69, 49: 19},
        28: {0: 60, 1: 74, 2: 44, 3: 93, 4: 111, 5: 77, 6: 65, 7: 111, 8: 60, 9: 58, 10: 92, 11: 64, 12: 101, 13: 38, 14: 102, 15: 21, 16: 10, 17: 109, 18: 81, 19: 41, 20: 55, 21: 119, 22: 87, 23: 14, 24: 41, 25: 79, 26: 62, 27: 73, 29: 88, 30: 85, 31: 86, 32: 48, 33: 79, 34: 72, 35: 70, 36: 91, 37: 26, 38: 26, 39: 64, 40: 37, 41: 51, 42: 63, 43: 92, 44: 71, 45: 95, 46: 81, 47: 77, 48: 125, 49: 83},
        29: {0: 50, 1: 74, 2: 45, 3: 36, 4: 79, 5: 44, 6: 25, 7: 60, 8: 60, 9: 30, 10: 57, 11: 42, 12: 44, 13: 73, 14: 53, 15: 67, 16: 80, 17: 63, 18: 8, 19: 72, 20: 72, 21: 76, 22: 79, 23: 75, 24: 94, 25: 11, 26: 32, 27: 81, 28: 88, 30: 21, 31: 99, 32: 54, 33: 16, 34: 83, 35: 18, 36: 83, 37: 81, 38: 62, 39: 61, 40: 50, 41: 70, 42: 47, 43: 109, 44: 63, 45: 94, 46: 12, 47: 85, 48: 70, 49: 100},
        30: {0: 35, 1: 55, 2: 41, 3: 16, 4: 58, 5: 25, 6: 21, 7: 41, 8: 44, 9: 35, 10: 36, 11: 27, 12: 25, 13: 63, 14: 33, 15: 66, 16: 77, 17: 43, 18: 15, 19: 61, 20: 57, 21: 56, 22: 59, 23: 76, 24: 83, 25: 14, 26: 23, 27: 63, 28: 85, 29: 21, 31: 80, 32: 43, 33: 34, 34: 65, 35: 26, 36: 63, 37: 72, 38: 62, 39: 44, 40: 48, 41: 56, 42: 31, 43: 90, 44: 45, 45: 74, 46: 11, 47: 67, 48: 52, 49: 82},
        31: {0: 51, 1: 24, 2: 74, 3: 70, 4: 47, 5: 55, 6: 79, 7: 66, 8: 41, 9: 90, 10: 49, 11: 58, 12: 70, 13: 50, 14: 62, 15: 84, 16: 78, 17: 60, 18: 90, 19: 48, 20: 35, 21: 60, 22: 22, 23: 91, 24: 48, 25: 88, 26: 70, 27: 18, 28: 86, 29: 99, 30: 80, 32: 55, 33: 105, 34: 17, 35: 92, 36: 22, 37: 60, 38: 85, 39: 38, 40: 77, 41: 39, 42: 53, 43: 10, 44: 35, 45: 14, 46: 87, 47: 13, 48: 76, 49: 5},
        32: {0: 12, 1: 33, 2: 19, 3: 46, 4: 64, 5: 29, 6: 29, 7: 62, 8: 15, 9: 36, 10: 43, 11: 17, 12: 53, 13: 20, 14: 53, 15: 35, 16: 38, 17: 60, 18: 45, 19: 18, 20: 20, 21: 70, 22: 45, 23: 44, 24: 40, 25: 43, 26: 21, 27: 37, 28: 48, 29: 54, 30: 43, 31: 55, 33: 54, 34: 37, 35: 41, 36: 50, 37: 30, 38: 33, 39: 19, 40: 23, 41: 17, 42: 15, 43: 64, 44: 26, 45: 57, 46: 43, 47: 42, 48: 77, 49: 54},
        33: {0: 54, 1: 80, 2: 40, 3: 50, 4: 91, 5: 53, 6: 26, 7: 75, 8: 64, 9: 21, 10: 68, 11: 47, 12: 59, 13: 72, 14: 67, 15: 58, 16: 73, 17: 77, 18: 19, 19: 71, 20: 74, 21: 90, 22: 87, 23: 65, 24: 92, 25: 20, 26: 34, 27: 87, 28: 79, 29: 16, 30: 34, 31: 105, 32: 54, 34: 88, 35: 13, 36: 92, 37: 77, 38: 53, 39: 66, 40: 43, 41: 72, 42: 51, 43: 115, 44: 70, 45: 102, 46: 23, 47: 91, 48: 85, 49: 106},
        34: {0: 34, 1: 10, 2: 57, 3: 58, 4: 46, 5: 40, 6: 62, 7: 59, 8: 24, 9: 72, 10: 40, 11: 41, 12: 60, 13: 34, 14: 54, 15: 68, 16: 63, 17: 54, 18: 74, 19: 32, 20: 19, 21: 58, 22: 18, 23: 75, 24: 38, 25: 72, 26: 53, 27: 2, 28: 72, 29: 83, 30: 65, 31: 17, 32: 37, 33: 88, 35: 75, 36: 21, 37: 46, 38: 68, 39: 21, 40: 60, 41: 23, 42: 36, 43: 27, 44: 20, 45: 22, 46: 71, 47: 5, 48: 71, 49: 17},
        35: {0: 41, 1: 67, 2: 28, 3: 41, 4: 81, 5: 41, 6: 12, 7: 66, 8: 50, 9: 12, 10: 57, 11: 33, 12: 51, 13: 59, 14: 58, 15: 49, 16: 63, 17: 68, 18: 13, 19: 58, 20: 61, 21: 81, 22: 75, 23: 57, 24: 80, 25: 13, 26: 21, 27: 73, 28: 70, 29: 18, 30: 26, 31: 92, 32: 41, 33: 13, 34: 75, 36: 79, 37: 65, 38: 44, 39: 53, 40: 33, 41: 58, 42: 38, 43: 102, 44: 57, 45: 89, 46: 16, 47: 78, 48: 78, 49: 92},
        36: {0: 41, 1: 17, 2: 68, 3: 51, 4: 26, 5: 38, 6: 67, 7: 44, 8: 35, 9: 80, 10: 29, 11: 46, 12: 50, 13: 53, 14: 41, 15: 84, 16: 82, 17: 38, 18: 75, 19: 50, 20: 36, 21: 39, 22: 5, 23: 92, 24: 60, 25: 73, 26: 59, 27: 19, 28: 91, 29: 83, 30: 63, 31: 22, 32: 50, 33: 92, 34: 21, 35: 79, 37: 66, 38: 83, 39: 31, 40: 73, 41: 40, 42: 42, 43: 31, 44: 24, 45: 11, 46: 71, 47: 17, 48: 54, 49: 27},
        37: {0: 41, 1: 48, 2: 37, 3: 76, 4: 87, 5: 58, 6: 56, 7: 91, 8: 37, 9: 55, 10: 70, 11: 47, 12: 83, 13: 13, 14: 82, 15: 28, 16: 18, 17: 87, 18: 73, 19: 16, 20: 29, 21: 96, 22: 61, 23: 32, 24: 18, 25: 71, 26: 50, 27: 47, 28: 26, 29: 81, 30: 72, 31: 60, 32: 30, 33: 77, 34: 46, 35: 65, 36: 66, 38: 31, 39: 41, 40: 34, 41: 26, 42: 44, 43: 66, 44: 48, 45: 69, 46: 72, 47: 51, 48: 105, 49: 57},
        38: {0: 44, 1: 66, 2: 21, 3: 72, 4: 98, 5: 59, 6: 40, 7: 93, 8: 48, 9: 32, 10: 76, 11: 45, 12: 81, 13: 36, 14: 84, 15: 5, 16: 20, 17: 91, 18: 56, 19: 37, 20: 49, 21: 103, 22: 78, 23: 13, 24: 50, 25: 54, 26: 39, 27: 68, 28: 26, 29: 62, 30: 62, 31: 85, 32: 33, 33: 53, 34: 68, 35: 44, 36: 83, 37: 31, 39: 52, 40: 14, 41: 45, 42: 46, 43: 92, 44: 60, 45: 90, 46: 56, 47: 73, 48: 107, 49: 82},
        39: {0: 12, 1: 14, 2: 37, 3: 41, 4: 47, 5: 22, 6: 40, 7: 50, 8: 4, 9: 51, 10: 29, 11: 19, 12: 45, 13: 27, 14: 42, 15: 53, 16: 54, 17: 46, 18: 53, 19: 24, 20: 14, 21: 55, 22: 26, 23: 62, 24: 43, 25: 50, 26: 32, 27: 20, 28: 64, 29: 61, 30: 44, 31: 38, 32: 19, 33: 66, 34: 21, 35: 53, 36: 31, 37: 41, 38: 52, 40: 42, 41: 15, 42: 14, 43: 49, 44: 7, 45: 39, 46: 49, 47: 25, 48: 64, 49: 39},
        40: {0: 32, 1: 56, 2: 7, 3: 58, 4: 85, 5: 46, 6: 27, 7: 79, 8: 38, 9: 22, 10: 62, 11: 32, 12: 67, 13: 32, 14: 70, 15: 18, 16: 30, 17: 78, 18: 43, 19: 32, 20: 41, 21: 89, 22: 68, 23: 27, 24: 51, 25: 41, 26: 25, 27: 59, 28: 37, 29: 50, 30: 48, 31: 77, 32: 23, 33: 43, 34: 60, 35: 33, 36: 73, 37: 34, 38: 14, 39: 42, 41: 38, 42: 33, 43: 86, 44: 49, 45: 80, 46: 43, 47: 64, 48: 93, 49: 76},
        41: {0: 21, 1: 22, 2: 36, 3: 55, 4: 61, 5: 36, 6: 46, 7: 66, 8: 13, 9: 53, 10: 45, 11: 29, 12: 61, 13: 13, 14: 58, 15: 45, 16: 41, 17: 62, 18: 61, 19: 10, 20: 4, 21: 70, 22: 35, 23: 52, 24: 27, 25: 59, 26: 38, 27: 23, 28: 51, 29: 70, 30: 56, 31: 39, 32: 17, 33: 72, 34: 23, 35: 58, 36: 40, 37: 26, 38: 45, 39: 15, 40: 38, 42: 25, 43: 48, 44: 22, 45: 45, 46: 59, 47: 28, 48: 79, 49: 38},
        42: {0: 4, 1: 28, 2: 27, 3: 31, 4: 51, 5: 14, 6: 25, 7: 48, 8: 13, 9: 37, 10: 29, 11: 5, 12: 38, 13: 32, 14: 38, 15: 48, 16: 53, 17: 45, 18: 38, 19: 30, 20: 25, 21: 56, 22: 37, 23: 58, 24: 52, 25: 36, 26: 17, 27: 35, 28: 63, 29: 47, 30: 31, 31: 53, 32: 15, 33: 51, 34: 36, 35: 38, 36: 42, 37: 44, 38: 46, 39: 14, 40: 33, 41: 25, 43: 63, 44: 18, 45: 52, 46: 35, 47: 39, 48: 62, 49: 54},
        43: {0: 61, 1: 35, 2: 83, 3: 81, 4: 56, 5: 65, 6: 89, 7: 76, 8: 51, 9: 99, 10: 60, 11: 68, 12: 81, 13: 56, 14: 73, 15: 91, 16: 84, 17: 69, 18: 101, 19: 55, 20: 44, 21: 69, 22: 33, 23: 97, 24: 51, 25: 99, 26: 81, 27: 28, 28: 92, 29: 109, 30: 90, 31: 10, 32: 64, 33: 115, 34: 27, 35: 102, 36: 31, 37: 66, 38: 92, 39: 49, 40: 86, 41: 48, 42: 63, 44: 46, 45: 22, 46: 97, 47: 24, 48: 85, 49: 9},
        44: {0: 17, 1: 10, 2: 44, 3: 38, 4: 39, 5: 20, 6: 44, 7: 44, 8: 11, 9: 56, 10: 23, 11: 23, 12: 42, 13: 34, 14: 37, 15: 61, 16: 61, 17: 40, 18: 55, 19: 31, 20: 19, 21: 48, 22: 19, 23: 70, 24: 48, 25: 53, 26: 36, 27: 18, 28: 71, 29: 63, 30: 45, 31: 35, 32: 26, 33: 70, 34: 20, 35: 57, 36: 24, 37: 48, 38: 60, 39: 7, 40: 49, 41: 22, 42: 18, 43: 46, 45: 33, 46: 51, 47: 22, 48: 58, 49: 37},
        45: {0: 50, 1: 24, 2: 76, 3: 62, 4: 34, 5: 49, 6: 77, 7: 54, 8: 42, 9: 89, 10: 40, 11: 56, 12: 61, 13: 57, 14: 52, 15: 90, 16: 86, 17: 48, 18: 86, 19: 54, 20: 41, 21: 47, 22: 15, 23: 97, 24: 60, 25: 84, 26: 69, 27: 22, 28: 95, 29: 94, 30: 74, 31: 14, 32: 57, 33: 102, 34: 22, 35: 89, 36: 11, 37: 69, 38: 90, 39: 39, 40: 80, 41: 45, 42: 52, 43: 22, 44: 33, 46: 82, 47: 17, 48: 63, 49: 20},
        46: {0: 38, 1: 62, 2: 37, 3: 27, 4: 69, 5: 32, 6: 16, 7: 52, 8: 48, 9: 26, 10: 46, 11: 30, 12: 36, 13: 63, 14: 44, 15: 61, 16: 73, 17: 54, 18: 4, 19: 61, 20: 60, 21: 67, 22: 67, 23: 70, 24: 84, 25: 3, 26: 22, 27: 69, 28: 81, 29: 12, 30: 11, 31: 87, 32: 43, 33: 23, 34: 71, 35: 16, 36: 71, 37: 72, 38: 56, 39: 49, 40: 43, 41: 59, 42: 35, 43: 97, 44: 51, 45: 82, 47: 73, 48: 63, 49: 88},
        47: {0: 37, 1: 11, 2: 61, 3: 58, 4: 43, 5: 42, 6: 65, 7: 58, 8: 28, 9: 76, 10: 39, 11: 44, 12: 60, 13: 39, 14: 53, 15: 73, 16: 68, 17: 52, 18: 77, 19: 37, 20: 24, 21: 55, 22: 14, 23: 80, 24: 43, 25: 75, 26: 57, 27: 5, 28: 77, 29: 85, 30: 67, 31: 13, 32: 42, 33: 91, 34: 5, 35: 78, 36: 17, 37: 51, 38: 73, 39: 25, 40: 64, 41: 28, 42: 39, 43: 24, 44: 22, 45: 17, 46: 73, 48: 69, 49: 15},
        48: {0: 65, 1: 62, 2: 86, 3: 37, 4: 29, 5: 48, 6: 71, 7: 14, 8: 67, 9: 86, 10: 34, 11: 61, 12: 27, 13: 91, 14: 23, 15: 110, 16: 115, 17: 17, 18: 66, 19: 89, 20: 77, 21: 16, 22: 54, 23: 120, 24: 106, 25: 66, 26: 68, 27: 69, 28: 125, 29: 70, 30: 52, 31: 76, 32: 77, 33: 85, 34: 71, 35: 78, 36: 54, 37: 105, 38: 107, 39: 64, 40: 93, 41: 79, 42: 62, 43: 85, 44: 58, 45: 63, 46: 63, 47: 69, 49: 81},
        49: {0: 51, 1: 26, 2: 73, 3: 73, 4: 53, 5: 57, 6: 80, 7: 71, 8: 42, 9: 90, 10: 53, 11: 59, 12: 74, 13: 47, 14: 67, 15: 82, 16: 75, 17: 65, 18: 92, 19: 45, 20: 34, 21: 65, 22: 27, 23: 88, 24: 44, 25: 90, 26: 71, 27: 19, 28: 83, 29: 100, 30: 82, 31: 5, 32: 54, 33: 106, 34: 17, 35: 92, 36: 27, 37: 57, 38: 82, 39: 39, 40: 76, 41: 38, 42: 54, 43: 9, 44: 37, 45: 20, 46: 88, 47: 15, 48: 81}
    }

    percorso= [0, 42, 11, 26, 6, 35, 9, 2, 40, 38, 15, 23, '1S', 37, 13, 19, 41, 20, 8, 39, 44, 1, 27, 34, 47, 31, 49, '4S', 22, 36, 45, 43, 24, '1S', 16, 28, 32, 5, 10, 14, '3S', 17, 7, 48, 21, 4, 12, 3, '3S', 30, 46, 25, 18, 29, 33, 0]

    i = 1
    dizionario_citta= {}
    for element in lista_citta: 
        cliente= Cliente(element[0],element[1],dizionario_stazioni,i)
        dizionario_citta[i]= cliente
        i += 1

    
    percorso= [0, 32, 2, 40, 38, 15, 23, 28, 16, '1S', 37, 24, 13, 19, 41, 20, 8, 39, 44, 1, 27, 34, '4S', 47, 31, 49, 43, 45, 36, 22, 4, 21, '3S', 10, 17, 48, 7, 14, 12, 3, 30, 46, '2S', 25, 18, 29, 33, 35, 9, 6, 26, 11, 5, 42, 0]
              #[0, 42, 5, 11, 26, 6, 9, 33, 35, 29, 18, 25, '2S', 46, 30, 3, 12, 10, 14, 7, 48, 17, '3S', 21, 4, 22, 36, 45, 43, 49, 31, 47, 34, '4S', 27, 1, 44, 39, 8, 20, 41, 19, 13, 24, 37, '1S', 16, 28, 23, 15, 38, 40, 2, 32, 0]
              #[0, 42, 5, 11, 26, 6, 9, 33, 35, 29, 18, 25, '2S', 46, 30, 3, 12, 10, 14, 7, 48, 17, '3S', 21, 4, 22, 36, 45, 43, 49, 31, 47, 34, '4S', 27, 1, 44, 39, 8, 20, 41, 19, 13, 24, 37, 16, '1S', 28, 23, 15, 38, 40, 2, 32, 0]
    
    resAccettabilita= soluzione_accettabile(percorso, G, k, dizionario_citta, dizionario_stazioni)
    costo= calcola_costo(G, k, dizionario_citta, dizionario_stazioni, percorso)
    print("res: " + str(resAccettabilita))
    print("costo: " + str(costo))

